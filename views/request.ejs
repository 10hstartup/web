<%- include('blocks/app-header') %>
    <div class="container"></div>
    <div class="container mt-2">
      <center>
        <h1 id="reqid"></h1>
        <p style="font-size: 120%" id="prof-link-author"></p>
      </center>
      
      <div class="container">
        <div class="row">
          <div class="col-md-6">
            <div class="card hover" style="border: none; border-top: 3px solid #6b63ffbb; box-shadow: 0 0 0.7rem rgba(0, 0, 0, 0.06) !important;">
              <div class="card-body" id="infocard">
                <h5 class="card-title" id="title">
                  
                </h5>
                  <p class="card-text">
                    <form id="req">
                      <div class="form-group">
                        <label for="item">Item</label>
                        <input type="text" class="form-control" id="item" value="Loading..." readonly>
                      </div>
                      <div class="form-group">
                        <label for="date">Date</label>
                        <input type="text" class="form-control" id="date" value="Loading..." readonly>
                      </div>
                      <div class="form-group">
                        <label for="location">Dropoff Address</label>
                        <input type="text" class="form-control" id="location" value="Loading..." readonly>
                      </div>
                    </form>
                  </p>
                  <p id="prof-delete" class="text-right"></p>
                </div>
              </div>
          </div>
          <div class="col-md-6">
            <div class="card h-100 hover" style="border: 0px solid #666; border: none; border-top: 3px solid #6b63ffbb; box-shadow: 0 0 0.7rem rgba(0, 0, 0, 0.06) !important;">
              <div class="card-body">
                <div id="map" style="border-radius: 5px !important; height: 80.5% !important"></div><hr>
                <small id="stats">You <b>(A)</b> are <a id="distance">0km</a> away from the Dropoff Location <b>(B)</b>, or around a <a id="time">0min</a> drive.</small>
              </div>
            </div>
          </div>
        </div>
    </div><br>
      <p>
        <div class="accordion" id="accordionExample">
          <div class="card">
            <div class="card-header" id="headingOne">
              <h2 class="mb-0">
                <button style="font-weight: bold; color: #000 !important;" class="btn btn-link collapsed" type="button" data-toggle="collapse" data-target="#collapseOne" aria-expanded="true" aria-controls="collapseOne">
                  How to Sign Up to Disqus
                </button>
              </h2>
            </div>
        
            <div id="collapseOne" class="collapse" aria-labelledby="headingOne" data-parent="#accordionExample">
              <div class="card-body">
                <p style="font-size: 110%; padding-left: 15px">
                  1. <b>Sign up</b> to Disqus using integration or manual sign up.<br>
                  2. <b>Enter details</b> Disqus requests you to enter.<br>
                  3. If you manually signed in, verify your email. <i>Does <b>not</b> apply with integration sign in.</i><br>
                  4. Click <b>proceed</b> to the "Important Update" message.<br>
                  5. <b>Post</b> your comment.
                </p>  
              </div>
            </div>
          </div>
          <div class="card">
            <div class="card-header" id="headingTwo">
              <h2 class="mb-0">
                <button style="font-weight: bold; color: #000 !important;" class="btn btn-link collapsed" type="button" data-toggle="collapse" data-target="#collapseTwo" aria-expanded="false" aria-controls="collapseTwo">
                  How To Comment
                </button>
              </h2>
            </div>
            <div id="collapseTwo" class="collapse" aria-labelledby="headingTwo" data-parent="#accordionExample">
              <div class="card-body">
                <p style="font-size: 110%; padding-left: 15px">
                  1. Copy and Paste the link below into your comment.<br>
                  <input type="text" class="form-control" id="prof-link" value="Loading..." readonly>
                  2. Write what <b>date and time</b> you can drop off the resources.<br>
                  3. Add any <b>optional/alternative</b> ways to obtain requested resources.
                </p>  
              </div>
            </div>
          </div>
        </div><br>
      <div id="disqus_thread"></div>
  <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBh2J9GP72NGMhCWCUwHH3togISxVR8DG4&libraries=places,geometry"></script>
  <style>
    body {
      background: #F6F6F6 !important;
    }
  </style>
  <script defer>
    let map;
    let address;
    let homeAddress;
    let coordArray = [];

    function distance(lat1, lon1, lat2, lon2) {
      const R = 6371; // km (change this constant to get miles)
      const dLat = ((lat2 - lat1) * Math.PI) / 180;
      const dLon = ((lon2 - lon1) * Math.PI) / 180;
      const a =
        Math.sin(dLat / 2) * Math.sin(dLat / 2) +
        Math.cos((lat1 * Math.PI) / 180) *
          Math.cos((lat2 * Math.PI) / 180) *
          Math.sin(dLon / 2) *
          Math.sin(dLon / 2);
      const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
      const d = R * c;
      if (d > 1) return `${Math.round(d)}km`;
      else if (d <= 1) return `${Math.round(d * 1000)}m`;
      return d;
    }

    function initService() {
      let count = 0;
      function parse(predictions, status) {
        
        if (status != google.maps.places.PlacesServiceStatus.OK) {
          console.log(status);
          return;
        }
        ++count;
        if (count === 2) address = predictions[0].description;
        else homeAddress = predictions[0].description;
        if (homeAddress && address) initMap();
      };

      if (!localStorage.getItem('name')) {
        document.querySelector('#stats').innerHTML = '<a href="/login">Login to See Map Calculations</a>';
        return document.querySelector('#map').innerHTML = '<a href="/login">Login to See Map Data</a>';
      }
      if (!localStorage.getItem('location').replace('Not Configured', '')) {
        document.querySelector('#stats').innerHTML = '<a href="/configure">Configure Location to See Map Calculations</a>';
        return document.querySelector('#map').innerHTML = '<a href="/configure">Configure Location to See Map Calculations</a>';
      }
      const service = new google.maps.places.AutocompleteService();
      service.getQueryPredictions({ input: document.querySelector('#location').value }, parse);
      service.getQueryPredictions({ input: localStorage.getItem('location') }, parse);
    }

    async function initMap() { 
      let options = {
        zoom: 10, 
        center: { lat: 0, lng: -180 },
        disableDefaultUI: true,
      }
      map = new google.maps.Map(document.getElementById('map'), options);
      const res = await fetch('https://ipapi.co/json/')
        .then(res => res.text())
        .then(async response => {
          let geocoder = new google.maps.Geocoder();
          await geocodeAddressMark(geocoder, map, address);
          await geocodeAddressMark(geocoder, map, response.city || homeAddress);
        })
        .catch(async (data, status) => {
          let geocoder = new google.maps.Geocoder();
          await geocodeAddressMark(geocoder, map, address);
          await geocodeAddressMark(geocoder, map, homeAddress);
        })
    }

    let coordCalcCount = 0;
    async function geocodeAddressMark(geocoder, resultsMap, address) {
      return new Promise((res, rej) => {
        geocoder.geocode({ address }, (results, status) => {
          if (status === 'OK') {
            coordArray.push([ 
              results[0].geometry.location.lat(), results[0].geometry.location.lng()
            ]);
            ++coordCalcCount;
            // let opts = {
            //   map: resultsMap,
            //   position: results[0].geometry.location,
            //   icon: {
            //     url: `${window.location.origin}/img/target_marker.svg`,
            //     scaledSize: new google.maps.Size(60, 60)
            //   },
            //   anchorPoint: results[0].geometry.location
            // }
            // if (coordCalcCount === 1) {
            //   opts.icon = {
            //     url: `${window.location.origin}/img/home_marker.svg`,
            //     scaledSize: new google.maps.Size(60, 60)
            //   }
            // }
            // let marker = new google.maps.Marker(opts);
            // const circle = new google.maps.Circle({
            //   map: map,
            //   strokeWeight: 1,
            //   strokeColor: '#48bb78',
            //   radius: 200,    // 10 miles in metres
            //   fillColor: '#abf5aa'
            // });
            // circle.bindTo('center', marker, 'position');
            // map.fitBounds(circle.getBounds())
            if (coordCalcCount === 1) return res(true);
            resultsMap.setCenter(results[0].geometry.location);
            if (coordCalcCount === 2) {
              let directionsService = new google.maps.DirectionsService;
              let directionsDisplay = new google.maps.DirectionsRenderer;
              directionsDisplay.setMap(map);
              calculateAndDisplayRoute(directionsService, directionsDisplay);
              const dist = distance(coordArray[0][0], coordArray[0][1], coordArray[1][0], coordArray[1][1]);
              if (dist.endsWith('km')) document.querySelector('#time').innerText = `${Math.round(parseInt(dist.replace(/[^0-9a-z-A-Z ]/g, '').replace(/ +/, ' ')) / 50 * 60)}min`;
              else document.querySelector('#time').innerText = `${Math.round(parseInt(dist.replace(/[^0-9a-z-A-Z ]/g, '').replace(/ +/, ' ')) / 50 * 6 / 10) / 10}min`;
              document.querySelector('#distance').innerText = dist;
            }
            res(true);
          } else {
            alert(status);
            rej(false);
          }
        });
      }); 
    }

    function calculateAndDisplayRoute(directionsService, directionsDisplay) {
      directionsService.route({
        origin: address,
        destination: homeAddress,
        travelMode: 'DRIVING',
        drivingOptions: {
          departureTime: new Date(Date.now() + 1),
          trafficModel: 'optimistic'
        }
      }, (response, status) => {
        if (status === 'OK') {
          directionsDisplay.setDirections(response);
        } else {
          console.log('Directions request failed due to ' + status);
        }
      });
    }
  </script>
  <script>
    var disqus_config = function () {
      this.page.url = window.location.href; 
      this.page.identifier = (new URLSearchParams(window.location.search)).get('id');
      this.callbacks.onNewComment = [function(comment) {
        console.log(comment.id);
        console.log(comment.text);
        fetch(`${window.location.origin}/v1/offer/increment?id=${ID}`)
      }];
    };

    (function() { // DON'T EDIT BELOW THIS LINE
    var d = document, s = d.createElement('script');
    s.src = 'https://corona-4.disqus.com/embed.js';
    s.setAttribute('data-timestamp', +new Date());
    (d.head || d.body).appendChild(s);
    })();
  </script>
  <noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>
                              
  </div>
  </div><br>
  <%- include('blocks/footer') %>
  <script id="dsq-count-scr" src="//corona-4.disqus.com/count.js" async></script>
  <script src="/js/request.js" defer></script>
</body>
</html>
